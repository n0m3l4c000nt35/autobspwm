#!/bin/bash

green="\e[0;32m\033[1m"
red="\e[0;31m\033[1m"
blue="\e[0;34m\033[1m"
yellow="\e[0;33m\033[1m"
purple="\e[0;35m\033[1m"
turquoise="\e[0;36m\033[1m"
gray="\e[0;37m\033[1m"
end="\033[0m\e[0m"

# Función para verificar si un comando se ejecutó correctamente
check_command() {
    if [ $? -eq 0 ]; then
        echo -e "\n${green}[OK]${end} $1"
    else
        echo -e "\n${red}[ERROR]${end} $1"
        exit 1
    fi
}

install_bspwm() {
    echo -e "\n${yellow}[+]${end} Instalando bspwm...\n"
    sudo apt install libxcb-xinerama0-dev libxcb-icccm4-dev libxcb-randr0-dev libxcb-util0-dev libxcb-ewmh-dev libxcb-keysyms1-dev libxcb-shape0-dev -y
    check_command "Instalación de dependencias de bspwm"
    git clone https://github.com/baskerville/bspwm.git ~/Downloads/bspwm
    git clone https://github.com/baskerville/sxhkd.git ~/Downloads/sxhkd
    sudo make -C ~/Downloads/bspwm
    sudo make -C ~/Downloads/bspwm install
    check_command "Instalación de bspwm"
    which bspwm
    check_command "Verificación de la instalación de bspwm"
}

install_sxhkd() {
    echo -e "\n${yellow}[+]${end} Instalando sxhkd...\n"
    cd ~/Downloads/sxhkd
    sudo make -C ~/Downloads/sxhkd
    sudo make -C ~/Downloads/sxhkd install
    check_command "Instalación de sxhkd"
    which sxhkd
    check_command "Verificación de la instalación sxhkd"
}

configure_bspwm_sxhkd() {
    echo -e "\n${yellow}[+]${end} Configurando bspwm y sxhkd...\n"
    cp ~/Downloads/bspwm/examples/bspwmrc ~/.config/bspwm/
    chmod +x ~/.config/bspwm/bspwmrc
    sudo apt install bspwm -y
    cp ~/Downloads/bspwm/examples/sxhkdrc ~/.config/sxhkd/
    check_command "Configuración inicial de bspwm y sxhkd"

    # Modificar sxhkdrc
    sed -i 's/super + {_,shift + }{h,j,k,l}/super + {_,shift + }{Left,Down,Up,Right}/' ~/.config/sxhkd/sxhkdrc
    sed -i 's/super + ctrl + {h,j,k,l}/super + ctrl + alt + {Left,Down,Up,Right}/' ~/.config/sxhkd/sxhkdrc
    sed -i 's/super + {h,j,k,l}/super + alt + shift + {Left,Down,Up,Right}/' ~/.config/sxhkd/sxhkdrc
    echo -e "\n# custom resize\nsuper + alt + {Left,Down,Up,Right}\n    ~/.config/bspwm/scripts/bspwm_resize {west,south,north,east}" >> ~/.config/sxhkd/sxhkdrc
    check_command "Modificación de sxhkd"

    # Eliminar líneas específicas del sxhkdrc
    sed -i '/^# expand a window by moving one of its side outward$/d' ~/.config/sxhkd/sxhkdrc
    sed -i '/^super + alt + {h,j,k,l}$/d' ~/.config/sxhkd/sxhkdrc
    sed -i '/^	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}$/d' ~/.config/sxhkd/sxhkdrc
    sed -i '/^# contract a window by moving one of its side inward$/d' ~/.config/sxhkd/sxhkdrc
    sed -i '/^super + alt + shift + {h,j,k,l}$/d' ~/.config/sxhkd/sxhkdrc
    sed -i '/^	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}$/d' ~/.config/sxhkd/sxhkdrc
    check_command "Eliminación de líneas específicas de sxhkdrc"

    # Crear script bspwm_resize
    mkdir -p ~/.config/bspwm/scripts
    cat << EOF > ~/.config/bspwm/scripts/bspwm_resize
#!/usr/bin/env dash

if bspc query -N -n focused.floating > /dev/null; then
    step=20
else
    step=100
fi

case "\$1" in
    west) dir=right; falldir=left; x="-\$step"; y=0;;
    east) dir=right; falldir=left; x="\$step"; y=0;;
    north) dir=top; falldir=bottom; x=0; y="-\$step";;
    south) dir=top; falldir=bottom; x=0; y="\$step";;
esac

bspc node -z "\$dir" "\$x" "\$y" || bspc node -z "\$falldir" "\$x" "\$y"
EOF
    chmod +x ~/.config/bspwm/scripts/bspwm_resize
    check_command "Creación del script bspwm_resize"

    # Agregar configuración para VMware
    echo "vmware-user-suid-wrapper &" >> ~/.config/bspwm/bspwmrc
    check_command "Configuración para VMware"

    # Agregar atajo para Firefox
    echo -e "\n# open firefox\nsuper + shift + f\n    /usr/bin/firefox" >> ~/.config/sxhkd/sxhkdrc
    check_command "Atajo para Firefox añadido"
}

install_kitty() {
    echo -e "\n${yellow}[+]${end} Instalando kitty...\n"
    sudo mkdir -p /opt/kitty
    wget -P ~/Downloads https://github.com/kovidgoyal/kitty/releases/download/v0.34.1/kitty-0.34.1-x86_64.txz
    mkdir ~/Downloads/kitty
    sudo tar -xf ~/Downloads/kitty-0.34.1-x86_64.txz -C ~/Downloads/kitty
    sudo rm -rf ~/Downloads/kitty-0.34.1-x86_64.txz
    sudo mv ~/Downloads/kitty/ /opt/
    check_command "Instalación de kitty"

    # Configurar sxhkd para usar kitty
    sed -i 's|urxvt|/opt/kitty/bin/kitty|g' ~/.config/sxhkd/sxhkdrc
    check_command "Configuración de sxhkd para kitty"

    # Configurar kitty
    mkdir -p ~/.config/kitty
    cat << EOF > ~/.config/kitty/kitty.conf
font_family HackNerdFont
cursor_shape beam

map ctrl+left neighboring_window left
map ctrl+right neighboring_window right
map ctrl+up neighboring_window up
map ctrl+down neighboring_window down

map ctrl+shift+enter new_window_with_cwd
map ctrl+shift+t new_tab_with_cwd

map f1 copy_to_buffer a
map f2 paste_from_buffer a
map f3 copy_to_buffer b
map f4 paste_from_buffer b

map ctrl+shift+z toggle_layout stack
tab_bar_style powerline

inactive_tab_background #e06c75
active_tab_background #98c379
inactive_tab_foreground #000000
tab_bar_margin_color #000000

background_opacity 0.95
EOF
    check_command "Configuración de kitty"

    # Copiar configuración para root
    sudo mkdir -p /root/.config/kitty
    sudo cp ~/.config/kitty/* /root/.config/kitty
    check_command "Copia de configuración de kitty para root"
}

install_zsh() {
    echo -e "\n${yellow}[+]${end} Instalando zsh...\n"
    sudo apt install zsh zsh-autosuggestions zsh-syntax-highlighting -y
    check_command "Instalación de zsh y plugins"

    sudo usermod --shell /usr/bin/zsh $USER
    sudo usermod --shell /usr/bin/zsh root
    check_command "Configuración de zsh como shell predeterminada"

    # Agregar configuración a kitty
    echo "shell zsh" >> ~/.config/kitty/kitty.conf
    check_command "Configuración de kitty para usar zsh"
}

install_fonts() {
    echo -e "\n${yellow}[+}${end} Instalando fuentes...\n"
    sudo wget -P /usr/local/share/fonts https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/Hack.zip
    sudo unzip /usr/local/share/fonts/Hack.zip -d /usr/local/share/fonts
    sudo rm -rf /usr/local/share/fonts/Hack.zip /usr/local/share/fonts/README.md /usr/local/share/fonts/LICENSE.md
    check_command "Instalación de Hack Nerd Font"

    git clone https://github.com/VaughnValle/blue-sky.git ~/Downloads
    sudo cp blue-sky/polybar/fonts/* /usr/share/fonts/truetype
    sudo fc-cache -v
    rm -rf ~/Downloads/blue-sky
    check_command "Instalación de fuentes adicionales"
}

install_powerlevel10k() {
    echo -e "\n${yellow}[+]${end} Instalando powerlevel10k...\n"
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k
    echo 'source ~/powerlevel10k/powerlevel10k.zsh-theme' >> ~/.zshrc
    check_command "Instalación de powerlevel10k"

    echo -e "\n${yellow}[+]${end} Configurando Powerlevel10k...\n"
    
    expect <<EOF
    spawn zsh
    expect "Does this look like a diamond (rotated square)?"; send "y"
    expect "Does this look like a lock?"; send "y"
    expect "Does this look like an upwards arrow?"; send "y"
    expect "What digit is the downwards arrow pointing at?"; send "1"
    expect "Do all these icons fit between the crosses?"; send "y"
    expect "Prompt Style"; send "2"
    expect "Character Set"; send "1"
    expect "Prompt Color"; send "2"
    expect "Show current time?"; send "n"
    expect "Prompt Separators"; send "1"
    expect "Prompt Heads"; send "3"
    expect "Prompt Tails"; send "4"
    expect "Prompt Height"; send "1"
    expect "Prompt Spacing"; send "2"
    expect "Icons"; send "2"
    expect "Prompt Flow"; send "2"
    expect "Enable Transient Prompt?"; send "y"
    expect "Instant Prompt Mode"; send "1"
    expect "Apply changes to ~/.zshrc?"; send "y"
    expect eof
EOF
    check_command "Configuración de Powerlevel10k"
    echo -e "\n${green}[✓]${end} Powerlevel10k ha sido instalado y configurado.\n"
}

# Actualizar el sistema
# sudo apt update && sudo apt upgrade -y
# check_command "Actualización del sistema

# Instalar dependencias básicas
sudo apt install git wget curl build-essential expect -y
check_command "Instalación de dependencias básicas"

# Crear directorios necesarios
mkdir -p ~/.config/{bspwm,sxhkd,kitty,picom,polybar}
check_command "Creación de directorios de configuración"

# Función principal
main() {
    echo -e "\n${yellow}[+]${end} Comenzando la personalización del sistema..."
    install_bspwm
    install_sxhkd
    configure_bspwm_sxhkd
    install_kitty
    install_zsh
    install_fonts
    install_powerlevel10k
}

# Ejecutar la función principal
main
