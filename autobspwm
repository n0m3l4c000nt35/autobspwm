#!/bin/env bash

green="\e[0;32m\033[1m"
red="\e[0;31m\033[1m"
blue="\e[0;34m\033[1m"
yellow="\e[0;33m\033[1m"
purple="\e[0;35m\033[1m"
turquoise="\e[0;36m\033[1m"
gray="\e[0;37m\033[1m"
end="\033[0m\e[0m"

installation_error=false
error_message=""

banner(){
    echo
    cat << 'EOF'
                                s                      ..       .x+=:.                                                        
                               :8                . uW8"        z`    ^%                  x=~                                  
               x.    .        .88           u.   `t888            .   <k  .d``          88x.   .e.   .e.     ..    .     :    
      u      .@88k  z88u     :888ooo  ...ue888b   8888   .      .@8Ned8"  @8Ne.   .u   '8888X.x888:.x888   .888: x888  x888.  
   us888u.  ~"8888 ^8888   -*8888888  888R Y888r  9888.z88N   .@^%8888"   %8888:u@88N   `8888  888X '888k ~`8888~'888X`?888f` 
.@88 "8888"   8888  888R     8888     888R I888>  9888  888E x88:  `)8b.   `888I  888.   X888  888X  888X   X888  888X '888>  
9888  9888    8888  888R     8888     888R I888>  9888  888E 8888N=*8888    888I  888I   X888  888X  888X   X888  888X '888>  
9888  9888    8888  888R     8888     888R I888>  9888  888E  %8"    R88    888I  888I   X888  888X  888X   X888  888X '888>  
9888  9888    8888 ,888B .  .8888Lu= u8888cJ888   9888  888E   @8Wou 9%   uW888L  888'  .X888  888X. 888~   X888  888X '888>  
9888  9888   "8888Y 8888"   ^%888*    "*888*P"   .8888  888" .888888P`   '*88888Nu88P   `%88%``"*888Y"     "*88%""*88" '888!` 
"888*""888"   `Y"   'YP       'Y"       'Y"       `%888*%"   `   ^"F     ~ '88888F`       `~     `"          `~    "    `"`   
 ^Y"   ^Y'                                           "`                     888 ^                                             
                                                                            *8E                                               
                                                                            '8>                                               
                                                                             "                                          
EOF
}

check_command() {
    if [ $? -eq 0 ]; then
        echo -e "\n${green}[OK]${end} $1"
    else
        echo -e "\n${red}[ERROR]${end} $1"
        installation_error=true
        error_message="Error en: $1"
        return 1
    fi
}

install_bspwm() {
    echo -e "\n${yellow}[+]${end} Instalando bspwm...\n"

    sudo apt install libxcb-xinerama0-dev libxcb-icccm4-dev libxcb-randr0-dev libxcb-util0-dev libxcb-ewmh-dev libxcb-keysyms1-dev libxcb-shape0-dev -y
    git clone https://github.com/baskerville/bspwm.git ~/Downloads/bspwm
    git clone https://github.com/baskerville/sxhkd.git ~/Downloads/sxhkd
    sudo make -C ~/Downloads/bspwm
    sudo make -C ~/Downloads/bspwm install

    check_command "Verificación de la instalación de bspwm" || return 1
}

install_sxhkd() {
    echo -e "\n${yellow}[+]${end} Instalando sxhkd...\n"

    sudo make -C ~/Downloads/sxhkd
    sudo make -C ~/Downloads/sxhkd install

    check_command "Verificación de la instalación sxhkd"
}

configure_bspwm_sxhkd() {
    echo -e "\n${yellow}[+]${end} Configurando bspwm y sxhkd...\n"

    wget -P ~/.config/bspwm/ https://raw.githubusercontent.com/n0m3l4c000nt35/autobspwm/main/files/bspwmrc
    chmod +x ~/.config/bspwm/bspwmrc
    sudo apt install bspwm -y
    wget -P ~/.config/sxhkd/ https://raw.githubusercontent.com/n0m3l4c000nt35/autobspwm/main/files/sxhkdrc
    wget -P ~/.config/bspwm/scripts https://raw.githubusercontent.com/n0m3l4c000nt35/autobspwm/main/files/bspwm_resize
    chmod +x ~/.config/bspwm/scripts/bspwm_resize

    check_command "Configuración de bspwm y sxhkd"
}

install_kitty() {
    echo -e "\n${yellow}[+]${end} Instalando kitty...\n"

    sudo mkdir -p /opt/kitty
    wget -P ~/Downloads https://github.com/kovidgoyal/kitty/releases/download/v0.35.2/kitty-0.35.2-x86_64.txz
    mkdir ~/Downloads/kitty
    sudo tar -xf ~/Downloads/kitty-0.35.2-x86_64.txz -C ~/Downloads/kitty
    sudo rm -rf ~/Downloads/kitty-0.35.2-x86_64.txz
    sudo mv ~/Downloads/kitty/ /opt/
    sudo mkdir -p /root/.config/kitty
    wget -P ~/.config/kitty https://raw.githubusercontent.com/n0m3l4c000nt35/autobspwm/main/files/kitty.conf
    wget -P ~/.config/kitty https://raw.githubusercontent.com/n0m3l4c000nt35/autobspwm/main/files/Box.conf
    sudo cp ~/.config/kitty/* /root/.config/kitty
    sudo ln -s /opt/kitty/bin/kitty /usr/bin/kitty
    sudo ln -s /opt/kitty/bin/kitten /usr/bin/kitten

    check_command "Verificación de la instalación de kitty"
}

install_zsh() {
    echo -e "\n${yellow}[+]${end} Instalando zsh...\n"

    sudo apt install zsh-autosuggestions zsh-syntax-highlighting zsh-autocomplete -y
    sudo usermod --shell /usr/bin/zsh $USER
    sudo usermod --shell /usr/bin/zsh root
    wget -P $HOME https://raw.githubusercontent.com/n0m3l4c000nt35/autobspwm/main/files/.zshrc
    sed -i "s|^source /home/.*/powerlevel10k/powerlevel10k.zsh-theme|source /home/$(whoami)/powerlevel10k/powerlevel10k.zsh-theme|" "$HOME/.zshrc"
    sudo ln -s -f ~/.zshrc /root/.zshrc

    check_command "Verificación de la instalación de zsh"
}

install_fonts() {
    echo -e "\n${yellow}[+}${end} Instalando fuentes...\n"

    sudo wget -P /usr/local/share/fonts https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/Hack.zip
    sudo unzip /usr/local/share/fonts/Hack.zip -d /usr/local/share/fonts
    sudo rm -rf /usr/local/share/fonts/Hack.zip /usr/local/share/fonts/README.md /usr/local/share/fonts/LICENSE.md
    git clone https://github.com/VaughnValle/blue-sky.git ~/Downloads
    sudo cp blue-sky/polybar/fonts/* /usr/share/fonts/truetype
    sudo fc-cache -v
    rm -rf ~/Downloads/blue-sky

    check_command "Verificación de la instalación de fuentes"
}

install_powerlevel10k() {
    echo -e "\n${yellow}[+]${end} Instalando powerlevel10k...\n"

    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k
    wget -P $HOME https://raw.githubusercontent.com/n0m3l4c000nt35/autobspwm/main/files/.p10k.zsh
    sudo cp ~/.p10k.zsh /root/.p10k.zsh
    source ~/.p10k.zsh
    source /root/.p10k.zsh
    sudo chown root:root /usr/local/share/zsh/site-functions/_bspc

    check_command "Verificación de la instalación de powerlevel10k"
}

install_picom() {
    echo -e "\n${yellow}[+]${end} Instalando picom...\n"

    sudo apt install libconfig-dev libdbus-1-dev libegl-dev libev-dev libgl-dev libepoxy-dev libpcre2-dev libpixman-1-dev libx11-xcb-dev libxcb1-dev libxcb-composite0-dev libxcb-damage0-dev libxcb-dpms0-dev libxcb-glx0-dev libxcb-image0-dev libxcb-present-dev libxcb-randr0-dev libxcb-render0-dev libxcb-render-util0-dev libxcb-shape0-dev libxcb-util-dev libxcb-xfixes0-dev libxext-dev meson ninja-build uthash-dev cmake -y
    git clone https://github.com/yshui/picom ~/Downloads/picom
    meson setup --buildtype=release ~/Downloads/picom/build ~/Downloads/picom
    ninja -C ~/Downloads/picom/build
    sudo ninja -C ~/Downloads/picom/build install
    rm -rf ~/Downloads/picom
    touch ~/.config/picom/picom.conf
    wget -O ~/.config/picom/picom.conf https://raw.githubusercontent.com/n0m3l4c000nt35/autobspwm/main/files/picom.conf

    check_command "Verificación de la instalación de picom"
}

install_bat_and_lsd() {
    echo -e "\n${yellow}[+]${end} Instalando bat y lsd...\n"

    wget -P ~/Downloads https://github.com/sharkdp/bat/releases/download/v0.24.0/bat_0.24.0_amd64.deb
    wget -P ~/Downloads https://github.com/lsd-rs/lsd/releases/download/v1.1.2/lsd_1.1.2_amd64.deb
    sudo dpkg -i ~/Downloads/bat_0.24.0_amd64.deb
    sudo dpkg -i ~/Downloads/lsd_1.1.2_amd64.deb
    rm ~/Downloads/bat_0.24.0_amd64.deb ~/Downloads/lsd_1.1.2_amd64.deb

    check_command "Verificación de la instalación de bat y lsd"
}

install_feh() {
    echo -e "\n${yellow}[+]${end} Instalando feh...\n"

    sudo apt install feh -y
    wget -P ~/Pictures https://raw.githubusercontent.com/n0m3l4c000nt35/autobspwm/main/files/wallpaper.jpg

    check_command "Verificación de la instalación de feh"
}

install_polybar() {
    echo -e "\n${yellow}[+]${end} Instalando polybar...\n"

    sudo apt install polybar -y
    wget -O ~/.config/polybar/launch.sh https://raw.githubusercontent.com/n0m3l4c000nt35/autobspwm/main/files/launch.sh
    wget -P ~/.config/polybar https://raw.githubusercontent.com/n0m3l4c000nt35/autobspwm/main/files/config.ini
    chmod +x ~/.config/polybar/launch.sh
    for script in ethernet_status.sh vpn_status.sh target_to_hack.sh; do
        wget -P ~/.config/bspwm/scripts/ https://raw.githubusercontent.com/n0m3l4c000nt35/autobspwm/main/files/$script
        chmod +x ~/.config/bspwm/scripts/$script
    done
    interface=$(/usr/sbin/ifconfig 2>/dev/null | grep -o '^[a-zA-Z0-9]\+' | grep -v '^lo$') || interface=$(ip -o -4 route show to default | awk '{print $5}'); sed -i "s/interface/$interface/" ~/.config/bspwm/scripts/ethernet_status.sh
    touch ~/.config/bin/target

    check_command "Verificación de la instalación de polybar"
}

install_imagemagick() {
    echo -e "\n${yellow}[+]${end} Instalando imagemagick...\n"

    sudo apt install imagemagick -y

    check_command "Verificación de la instalación de imagemagick"
}

install_nvim_nvchad() {
    echo -e "\n${yellow}[+]${end} Instalando nvim y nvchad...\n"

    if command -v nvim &> /dev/null; then
        sudo apt remove neovim -y
    fi
    if [ -f "/usr/share/applications/nvim.desktop" ]; then
        sudo rm -f /usr/share/applications/nvim.desktop
    fi
    if [ -f "/usr/share/applications/vim.desktop" ]; then
        sudo rm -f /usr/share/applications/vim.desktop
    fi
    git clone https://github.com/NvChad/starter ~/.config/nvim
    sudo mkdir /opt/nvim
    sudo wget -P /opt/nvim https://github.com/neovim/neovim/releases/download/v0.10.0/nvim-linux64.tar.gz
    sudo tar -xf /opt/nvim/nvim-linux64.tar.gz -C /opt/nvim
    sudo rm /opt/nvim/nvim-linux64.tar.gz
    sudo ln -s /opt/nvim/nvim-linux64/bin/nvim /usr/bin/nvim
    sed -i '/vim.g.mapleader = " "/a vim.opt.listchars = "tab:»·,trail:·"' ~/.config/nvim/init.lua
    sed -i '/theme = "onedark",/a\  transparency = true,' ~/.config/nvim/lua/chadrc.lua
    
    sudo mkdir -p /root/.config/nvim
    sudo cp -r ~/.config/nvim/* /root/.config/nvim

    check_command "Verificación de la instalación de nvim"
}

install_fzf() {
    echo -e "\n${yellow}[+]${end} Instalando fzf...\n"

    git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
    ~/.fzf/install --all
    sudo git clone --depth 1 https://github.com/junegunn/fzf.git /root/.fzf
    sudo /root/.fzf/install --all

    check_command "Verificación de la instalación de fzf"
}

install_i3lock() {
    echo -e "\n${yellow}[+]${end} Instalando i3lock...\n"

    sudo apt install i3lock -y
    sudo git clone https://github.com/meskarune/i3lock-fancy.git /opt/i3lock-fancy
    sudo make -C /opt/i3lock-fancy install

    check_command "Verificación de la instalación de i3lock-fancy"
}

install_locate() {
    echo -e "\n${yellow}[+]${end} Instalando locate...\n"

    sudo apt install locate -y
    if mountpoint -q /run/user/1000/doc; then
        sudo umount /run/user/1000/doc
    fi
    if mountpoint -q /run/user/1000/gvfs; then
        sudo umount /run/user/1000/gvfs
    fi
    sudo updatedb
    
    check_command "Verificación de la instalación de locate"
}

show_final_message() {
    if [ "$installation_error" = false ]; then
        echo -e "\n${green}[♣]${end}###########################################${green}[♠]${end}"
        echo -e "${green}[✔]${end} La instalación ha finalizado exitosamente ${green}[✔]${end}"
        echo -e "${green}[♥]${end}###########################################${green}[♦]${end}\n"
    else
        echo -e "\n${red}[✘] La instalación ha fallado.${end}"
        echo -e "Error: $error_message"
        echo -e "Por favor, informa de este error para que pueda mejorar el script."
        echo -e "Puedes reportar el error en: https://github.com/n0m3l4c000nt35/autobspwm/issues"
    fi
}

# Instalar dependencias básicas
sudo apt install git wget curl build-essential -y
check_command "Instalación de dependencias básicas"

# Crear directorios necesarios
mkdir -p ~/.config/{bspwm/scripts,sxhkd,kitty,picom,polybar,bin}
check_command "Creación de directorios de configuración"

main() {
    banner
    echo -e "\n${yellow}[+]${end} Comenzando la personalización del sistema..."
    install_bspwm || return
    install_sxhkd || return
    configure_bspwm_sxhkd || return
    install_kitty || return
    install_zsh || return
    install_fonts || return
    install_powerlevel10k || return
    install_picom || return
    install_bat_and_lsd || return
    install_feh || return
    install_polybar || return
    install_imagemagick || return
    install_nvim_nvchad || return
    install_fzf || return
    install_i3lock || return
    install_locate || return
    show_final_message
}

main || {
    echo -e "\n${red}[✘] Se ha producido un error inesperado.${end}"
    echo -e "Por favor, informe de este error para que podamos mejorar el script."
    echo -e "Puede reportar el error en: https://github.com/tu_usuario/tu_repositorio/issues"
    exit 1
}