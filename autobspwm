#!/bin/bash

green="\e[0;32m\033[1m"
red="\e[0;31m\033[1m"
blue="\e[0;34m\033[1m"
yellow="\e[0;33m\033[1m"
purple="\e[0;35m\033[1m"
turquoise="\e[0;36m\033[1m"
gray="\e[0;37m\033[1m"
end="\033[0m\e[0m"

# Función para verificar si un comando se ejecutó correctamente
check_command() {
    if [ $? -eq 0 ]; then
        echo -e "\n${green}[OK]${end} $1"
    else
        echo -e "\n${red}[ERROR]${end} $1"
        exit 1
    fi
}

install_bspwm() {
    echo -e "\n${green}[+]${end} Instalando bspwm...\n"
    sudo apt install libxcb-xinerama0-dev libxcb-icccm4-dev libxcb-randr0-dev libxcb-util0-dev libxcb-ewmh-dev libxcb-keysyms1-dev libxcb-shape0-dev -y
    check_command "Instalación de dependencias de bspwm"
    git clone https://github.com/baskerville/bspwm.git ~/Downloads/bspwm
    git clone https://github.com/baskerville/sxhkd.git ~/Downloads/sxhkd
    sudo make -C ~/Downloads/bspwm
    sudo make -C ~/Downloads/bspwm install
    check_command "Instalación de bspwm"
    which bspwm
    check_command "Verificación de la instalación de bspwm"
}

install_sxhkd() {
    echo -e "\n${green}[+]${end} Instalando sxhkd...\n"
    cd ~/Downloads/sxhkd
    sudo make -C ~/Downloads/sxhkd
    sudo make -C ~/Downloads/sxhkd install
    check_command "Instalación de sxhkd"
    which sxhkd
    check_command "Verificación de la instalación sxhkd"
}

configure_bspwm_sxhkd() {
    echo -e "\n${green}[+]${end} Configurando bspwm y sxhkd...\n"
    cp ~/Downloads/bspwm/examples/bspwmrc ~/.config/bspwm/
    chmod +x ~/.config/bspwm/bspwmrc
    sudo apt install bspwm -y
    cp ~/Downloads/bspwm/examples/sxhkdrc ~/.config/sxhkd/
    check_command "Configuración inicial de bspwm y sxhkd"

    # Modificar sxhkdrc
    sed -i 's/super + {_,shift + }{h,j,k,l}/super + {_,shift + }{Left,Down,Up,Right}/' ~/.config/sxhkd/sxhkdrc
    sed -i 's/super + ctrl + {h,j,k,l}/super + ctrl + alt + {Left,Down,Up,Right}/' ~/.config/sxhkd/sxhkdrc
    sed -i 's/super + {h,j,k,l}/super + alt + shift + {Left,Down,Up,Right}/' ~/.config/sxhkd/sxhkdrc
    echo -e "\n# custom resize\nsuper + alt + {Left,Down,Up,Right}\n    ~/.config/bspwm/scripts/bspwm_resize {west,south,north,east}" >> ~/.config/sxhkd/sxhkdrc
    check_command "Modificación de sxhkd"

    # Eliminar líneas específicas del sxhkdrc
    sed -i '/^# expand a window by moving one of its side outward$/d' ~/.config/sxhkd/sxhkdrc
    sed -i '/^super + alt + {h,j,k,l}$/d' ~/.config/sxhkd/sxhkdrc
    sed -i '/^	bspc node -z {left -20 0,bottom 0 20,top 0 -20,right 20 0}$/d' ~/.config/sxhkd/sxhkdrc
    sed -i '/^# contract a window by moving one of its side inward$/d' ~/.config/sxhkd/sxhkdrc
    sed -i '/^super + alt + shift + {h,j,k,l}$/d' ~/.config/sxhkd/sxhkdrc
    sed -i '/^	bspc node -z {right -20 0,top 0 20,bottom 0 -20,left 20 0}$/d' ~/.config/sxhkd/sxhkdrc
    check_command "Eliminación de líneas específicas de sxhkdrc"

    # Crear script bspwm_resize
    mkdir -p ~/.config/bspwm/scripts
    cat << EOF > ~/.config/bspwm/scripts/bspwm_resize
#!/usr/bin/env dash

if bspc query -N -n focused.floating > /dev/null; then
    step=20
else
    step=100
fi

case "\$1" in
    west) dir=right; falldir=left; x="-\$step"; y=0;;
    east) dir=right; falldir=left; x="\$step"; y=0;;
    north) dir=top; falldir=bottom; x=0; y="-\$step";;
    south) dir=top; falldir=bottom; x=0; y="\$step";;
esac

bspc node -z "\$dir" "\$x" "\$y" || bspc node -z "\$falldir" "\$x" "\$y"
EOF
    chmod +x ~/.config/bspwm/scripts/bspwm_resize
    check_command "Creación del script bspwm_resize"

    # Agregar configuración para VMware
    echo "vmware-user-suid-wrapper &" >> ~/.config/bspwm/bspwmrc
    check_command "Configuración para VMware"

    # Agregar atajo para Firefox
    echo -e "\n# open firefox\nsuper + shift + f\n    /usr/bin/firefox" >> ~/.config/sxhkd/sxhkdrc
    check_command "Atajo para Firefox añadido"
}

install_kitty() {
    echo -e "\n${green}[+]${end} Instalando kitty...\n"
    sudo mkdir -p /opt/kitty
    wget -P ~/Downloads https://github.com/kovidgoyal/kitty/releases/download/v0.34.1/kitty-0.34.1-x86_64.txz
    mkdir ~/Downloads/kitty
    sudo tar -xf ~/Downloads/kitty-0.34.1-x86_64.txz -C ~/Downloads/kitty
    sudo rm -rf ~/Downloads/kitty-0.34.1-x86_64.txz
    sudo mv ~/Downloads/kitty/ /opt/
    check_command "Instalación de kitty"

    # Configurar sxhkd para usar kitty
    sed -i 's|urxvt|/opt/kitty/bin/kitty|g' ~/.config/sxhkd/sxhkdrc
    check_command "Configuración de sxhkd para kitty"

    # Configurar kitty
    mkdir -p ~/.config/kitty
    cat << EOF > ~/.config/kitty/kitty.conf
font_family HackNerdFont
cursor_shape beam

map ctrl+left neighboring_window left
map ctrl+right neighboring_window right
map ctrl+up neighboring_window up
map ctrl+down neighboring_window down

map ctrl+shift+enter new_window_with_cwd
map ctrl+shift+t new_tab_with_cwd

map f1 copy_to_buffer a
map f2 paste_from_buffer a
map f3 copy_to_buffer b
map f4 paste_from_buffer b

map ctrl+shift+z toggle_layout stack
tab_bar_style powerline

inactive_tab_background #e06c75
active_tab_background #98c379
inactive_tab_foreground #000000
tab_bar_margin_color #000000

background_opacity 0.95
EOF
    check_command "Configuración de kitty"

    # Copiar configuración para root
    sudo mkdir -p /root/.config/kitty
    sudo cp ~/.config/kitty/* /root/.config/kitty
    check_command "Copia de configuración de kitty para root"
}

install_zsh() {
    echo -e "\n${green}[+]${end} Instalando zsh...\n"
    sudo apt install zsh zsh-autosuggestions zsh-syntax-highlighting -y
    check_command "Instalación de zsh y plugins"

    sudo usermod --shell /usr/bin/zsh $USER
    sudo usermod --shell /usr/bin/zsh root
    check_command "Configuración de zsh como shell predeterminada"

    # Agregar configuración a kitty
    echo "shell zsh" >> ~/.config/kitty/kitty.conf
    check_command "Configuración de kitty para usar zsh"
}

install_fonts() {
    echo -e "\n${green}[+}${end} Instalando fuentes...\n"
    sudo wget -P /usr/local/share/fonts https://github.com/ryanoasis/nerd-fonts/releases/download/v3.2.1/Hack.zip
    sudo unzip /usr/local/share/fonts/Hack.zip -d /usr/local/share/fonts
    sudo rm -rf /usr/local/share/fonts/Hack.zip /usr/local/share/fonts/README.md /usr/local/share/fonts/LICENSE.md
    check_command "Instalación de Hack Nerd Font"

    git clone https://github.com/VaughnValle/blue-sky.git ~/Downloads
    sudo cp blue-sky/polybar/fonts/* /usr/share/fonts/truetype
    sudo fc-cache -v
    rm -rf ~/Downloads/blue-sky
    check_command "Instalación de fuentes adicionales"
}

install_powerlevel10k() {
    echo -e "\n${green}[+]${end} Instalando powerlevel10k...\n"
    git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k
    echo 'source ~/powerlevel10k/powerlevel10k.zsh-theme' >> ~/.zshrc
    check_command "Instalación de powerlevel10k"

    # Configurar powerlevel10k
    sed -i '/POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=/,/)/c\
  typeset -g POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(\
    os_icon                 # os identifier\
    dir                     # current directory\
    vcs                     # git status\
    command_execution_time\
    context\
    status\
    # prompt_char           # prompt symbol\
  )' ~/.p10k.zsh

    # Modificar RIGHT_PROMPT_ELEMENTS
    sed -i '/POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=/,/)/c\
  typeset -g POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(\
    # status                  # exit code of the last command\
    # command_execution_time  # duration of the last command\
    # background_jobs         # presence of background jobs\
    # direnv                  # direnv status (https://direnv.net/)\
    # asdf                    # asdf version manager (https://github.com/asdf-vm/asdf)\
    virtualenv              # python virtual environment (https://docs.python.org/3/library/venv.html)\
    # anaconda                # conda environment (https://conda.io/)\
    pyenv                   # python environment (https://github.com/pyenv/pyenv)\
    # goenv                   # go environment (https://github.com/syndbg/goenv)\
    # nodenv                  # node.js version from nodenv (https://github.com/nodenv/nodenv)\
    # nvm                     # node.js version from nvm (https://github.com/nvm-sh/nvm)\
    # nodeenv                 # node.js environment (https://github.com/ekalinin/nodeenv)\
    # rbenv                   # ruby version from rbenv (https://github.com/rbenv/rbenv)\
    # rvm                     # ruby version from rvm (https://rvm.io)\
    # fvm                     # flutter version management (https://github.com/leoafarias/fvm)\
    # luaenv                  # lua version from luaenv (https://github.com/cehoffman/luaenv)\
    # jenv                    # java version from jenv (https://github.com/jenv/jenv)\
    # plenv                   # perl version from plenv (https://github.com/tokuhirom/plenv)\
    # perlbrew                # perl version from perlbrew (https://github.com/gugod/App-perlbrew)\
    # phpenv                  # php version from phpenv (https://github.com/phpenv/phpenv)\
    # scalaenv                # scala version from scalaenv (https://github.com/scalaenv/scalaenv)\
    # haskell_stack           # haskell version from stack (https://haskellstack.org/)\
    # kubecontext             # current kubernetes context (https://kubernetes.io/)\
    # terraform               # terraform workspace (https://www.terraform.io)\
    # aws                     # aws profile (https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html)\
    # aws_eb_env              # aws elastic beanstalk environment (https://aws.amazon.com/elasticbeanstalk/)\
    # azure                   # azure account name (https://docs.microsoft.com/en-us/cli/azure)\
    # gcloud                  # google cloud cli account and project (https://cloud.google.com/)\
    # google_app_cred         # google application credentials (https://cloud.google.com/docs/authentication/production)\
    # toolbox                 # toolbox name (https://github.com/containers/toolbox)\
    # context                 # user@hostname\
    # nordvpn                 # nordvpn connection status, linux only (https://nordvpn.com/)\
    # ranger                  # ranger shell (https://github.com/ranger/ranger)\
    # yazi                    # yazi shell (https://github.com/sxyazi/yazi)\
    # nnn                     # nnn shell (https://github.com/jarun/nnn)\
    # lf                      # lf shell (https://github.com/gokcehan/lf)\
    # xplr                    # xplr shell (https://github.com/sayanarijit/xplr)\
    # vim_shell               # vim shell indicator (:sh)\
    # midnight_commander      # midnight commander shell (https://midnight-commander.org/)\
    # nix_shell               # nix shell (https://nixos.org/nixos/nix-pills/developing-with-nix-shell.html)\
    # chezmoi_shell           # chezmoi shell (https://www.chezmoi.io/)\
    # todo                    # todo items (https://github.com/todotxt/todo.txt-cli)\
    # timewarrior             # timewarrior tracking status (https://timewarrior.net/)\
    # taskwarrior             # taskwarrior task count (https://taskwarrior.org/)\
    # per_directory_history   # Oh My Zsh per-directory-history local/global indicator\
  )' ~/.p10k.zsh

    # Añadir o modificar otras configuraciones
    sed -i 's/POWERLEVEL9K_DIR_ANCHOR_BOLD=true/POWERLEVEL9K_DIR_ANCHOR_BOLD=false/' ~/.p10k.zsh

    check_command "Configuración básica de powerlevel10k"

    # Configurar zsh
    cat << EOF >> ~/.zshrc
# Fix Java issue
export _JAVA_AWT_WM_NONREPARENTING=1

# ZSH AutoSuggestions Plugin
if [ -f /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]; then
    source /usr/share/zsh-autosuggestions/zsh-autosuggestions.zsh
fi

# ZSH Syntax Highlighting Plugin
if [ -f /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ]; then
    source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# History
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt histignorealldups sharehistory

# Custom Aliases
# bat
alias cat='bat'
alias catn='bat --style=plain'
alias catnp='bat --style=plain --paging=never'

# ls
alias ll='lsd -lh --group-dirs=first'
alias la='lsd -a --group-dirs=first'
alias l='lsd --group-dirs=first'
alias lla='lsd -lha --group-dirs=first'
alias ls='lsd --group-dirs=first'

xset r rate 250 25
EOF
    check_command "Configuración adicional de zsh"
}

# Actualizar el sistema
# sudo apt update && sudo apt upgrade -y
# check_command "Actualización del sistema

# Instalar dependencias básicas
sudo apt install git wget curl build-essential -y
check_command "Instalación de dependencias básicas"

# Crear directorios necesarios
mkdir -p ~/.config/{bspwm,sxhkd,kitty,picom,polybar}
check_command "Creación de directorios de configuración"

# Función principal
main() {
    echo -e "\n${green}[+]${end} Comenzando la personalización del sistema..."
    install_bspwm
    install_sxhkd
    configure_bspwm_sxhkd
    install_kitty
    install_zsh
    install_fonts
    install_powerlevel10k
}

# Ejecutar la función principal
main
